#
# This file is programmatically generated by py_writer.py; do not edit
#
from h2a.lib.after_tax_income import get_after_tax_income_column
from h2a.lib.capital_investments import capital_investment_costs
from h2a.lib.carbon_sequestration import get_cc_storage_cost, get_cc_transport_cost
from h2a.lib.cashflow import get_aftertax_post_depreciation_cashflow, get_cumulative_cashflow_column, get_pretax_cashflow_column
from h2a.lib.cashflow_meta import get_inflation_price_increase_factors, get_operation_range
from h2a.lib.debt_financing import determine_interest_payment, determine_principal_payment
from h2a.lib.decommissioning import get_decom_costs_column
from h2a.lib.depreciable_capital import get_annual_depreciable_capital
from h2a.lib.depreciation_calculation import get_depreciation_calculation_table
from h2a.lib.depreciation_charges import get_depreciation_charges, get_depreciation_charges_column
from h2a.lib.energy import get_energy_input_for_feedstocks, get_upstream_energy_usage_for_feedstocks
from h2a.lib.feedstock_costs import get_total_feedstock_costs
from h2a.lib.feedstock_prices import get_feedstock_price_df
from h2a.lib.fixed_costs import get_fixed_cost_column
from h2a.lib.h2_sales import get_h2_sales_kg_per_year
from h2a.helpers import FIRST, YEAR_1, args_to_list, evaluate, get, irr, length, npv, round_num, seq_along, skip, slice, sum_args, sum_columns
from h2a.lib.initial_equity import get_initial_equity_depr_cap
from h2a.lib.nonenergy_materials import get_nonenergy_material_price_df
from h2a.lib.other_non_depreciable_capital_cost import get_other_non_depreciable_capital_cost_column
from h2a.lib.other_raw_material_costs import get_other_raw_material_cost_column
from h2a.lib.predepreciation_income import get_predepreciation_income_column
from h2a.lib.production_process_ghg_emissions import get_production_process_ghg_emissions_for_feedstocks, get_production_process_total_ghg_emissions_for_feedstocks
from h2a.lib.production_process_ghg_emissions_summary import get_co2_captured_kg_per_kg_h2, get_co2_captured_metric_tons_per_year, get_total_in_metric_tons_per_year, get_total_process_emissions_kg_per_kg_h2, get_total_process_emissions_metric_tons_per_year, get_total_well_to_pump_emissions_kg_per_kg_h2
from h2a.ref_tables import chemical_price_index, conversion_factor, conversion_factors, get_cpi, get_labor_index, get_lhv, get_plant_cost_index, macrs_depreciation_table
from h2a.lib.replacement_costs import get_replacement_costs
from h2a.lib.revenue_h2_sales import get_revenue_h2_sales_column
from h2a.lib.salvage import get_salvage_column
from h2a.lib.taxable_income import get_taxable_income_column
from h2a.lib.total_taxes import get_total_taxes_column
from h2a.lib.upstream_ghg_emissions import calculate_total_ghg_emission, get_total_ghg_emissions, get_upstream_ghg_emissions_for_feedstocks
from h2a.lib.variable_costs import get_variable_cost_column
from h2a.lib.working_capital_reserve import get_working_cap_reserve_column, get_working_cap_reserve_rows

def calculate(user_input):
  capacity_factor = user_input['capacity_factor']
  plant_design_capacity = user_input['plant_design_capacity']
  ref_year = user_input['ref_year']
  startup_year = user_input['startup_year']
  BasisYear = user_input['BasisYear']
  CurrentYear = user_input['CurrentYear']
  construct = user_input['construct']
  percent_cap1 = user_input['percent_cap1']
  percent_cap2 = user_input['percent_cap2']
  percent_cap3 = user_input['percent_cap3']
  percent_cap4 = user_input['percent_cap4']
  start_time = user_input['start_time']
  plant_life = user_input['plant_life']
  anal_period = user_input['anal_period']
  depr_length = user_input['depr_length']
  depr_type = user_input['depr_type']
  percentage_equity_financing = user_input['percentage_equity_financing']
  debt_interest = user_input['debt_interest']
  debt_period = user_input['debt_period']
  percnt_fixed = user_input['percnt_fixed']
  percnt_revs = user_input['percnt_revs']
  percnt_var = user_input['percnt_var']
  decom_percent = user_input['decom_percent']
  salvage_perct = user_input['salvage_perct']
  inflation_rate = user_input['inflation_rate']
  real_irr = user_input['real_irr']
  state_tax_rate = user_input['state_tax_rate']
  fed_tax_rate = user_input['fed_tax_rate']
  WorkingCap = user_input['WorkingCap']
  site_preparation = user_input['site_preparation']
  engineering_and_design = user_input['engineering_and_design']
  process_contingency = user_input['process_contingency']
  project_contingency = user_input['project_contingency']
  other_depreciable_capital_cost = user_input['other_depreciable_capital_cost']
  upfront_permitting = user_input['upfront_permitting']
  cost_per_acre = user_input['cost_per_acre']
  acres_required = user_input['acres_required']
  total_plant_staff = user_input['total_plant_staff']
  labor_cost_per_hour = user_input['labor_cost_per_hour']
  overhead_rate = user_input['overhead_rate']
  licensing = user_input['licensing']
  tax_ins_rate = user_input['tax_ins_rate']
  rent = user_input['rent']
  material_cost_maintenance_and_repairs = user_input['material_cost_maintenance_and_repairs']
  production_cost_maintenance_and_repairs = user_input['production_cost_maintenance_and_repairs']
  other_fees = user_input['other_fees']
  other_fixed = user_input['other_fixed']
  other_variable_operating_costs = user_input['other_variable_operating_costs']
  other_material_costs = user_input['other_material_costs']
  waste_treatment_costs = user_input['waste_treatment_costs']
  solid_waste_disposal_costs = user_input['solid_waste_disposal_costs']
  replace_factor = user_input['replace_factor']
  royalties = user_input['royalties']
  operator_profit = user_input['operator_profit']
  tax_credit_per_year = user_input['tax_credit_per_year']
  CO2_Capture_Efficiency = user_input['CO2_Capture_Efficiency']
  pipeline_length_km = user_input['pipeline_length_km']
  CO2_credit = user_input['CO2_credit']
  cpi_file = user_input['cpi_file']
  labor_file = user_input['labor_file']
  feedstocks = user_input['feedstocks']
  utilities = user_input['utilities']
  nonenergy_materials = user_input['nonenergy_materials']
  replacement_costs_for_years = user_input['replacement_costs_for_years']
  capital_investments = user_input['capital_investments']


  plant_output_kg_per_day = plant_design_capacity * capacity_factor
  print('plant_output_kg_per_day: ', plant_output_kg_per_day)

  plant_output_kg_per_year = plant_output_kg_per_day * 365
  print('plant_output_kg_per_year: ', plant_output_kg_per_year)

  full_analysis_period = construct + anal_period
  print('full_analysis_period: ', full_analysis_period)

  analysis_period_start = startup_year - construct
  print('analysis_period_start: ', analysis_period_start)

  analysis_period_end = analysis_period_start + full_analysis_period
  print('analysis_period_end: ', analysis_period_end)

  CEPCIinflator = get_plant_cost_index(CurrentYear) / get_plant_cost_index(BasisYear)
  print('CEPCIinflator: ', CEPCIinflator)

  CPIinflator = get_cpi(ref_year, cpi_file) / get_cpi(CurrentYear, cpi_file)
  print('CPIinflator: ', CPIinflator)

  INFLATION_FACTOR = (1 + inflation_rate) ** (startup_year - ref_year)
  print('INFLATION_FACTOR: ', INFLATION_FACTOR)

  H2_LHV_MJ_p_kg = get_lhv("Hydrogen")
  print('H2_LHV_MJ_p_kg: ', H2_LHV_MJ_p_kg)

  output_energy_MMBtu_per_year = plant_output_kg_per_year * H2_LHV_MJ_p_kg / 1000 / conversion_factor("mmBTU_to_GJ")
  print('output_energy_MMBtu_per_year: ', output_energy_MMBtu_per_year)

  output_energy_MJ_per_year = plant_output_kg_per_year * H2_LHV_MJ_p_kg
  print('output_energy_MJ_per_year: ', output_energy_MJ_per_year)

  nominal_irr = ((1 + real_irr) * (1 + inflation_rate)) - 1
  print('nominal_irr: ', nominal_irr)

  percentage_debt_financing = 1 - percentage_equity_financing
  print('percentage_debt_financing: ', percentage_debt_financing)

  target_after_tax_nominal_irr = (1 + real_irr)*(1 + inflation_rate) - 1
  print('target_after_tax_nominal_irr: ', target_after_tax_nominal_irr)

  analysis_range = range(analysis_period_start, analysis_period_end)
  print('analysis_range: ', analysis_range)

  analysis_index_range = seq_along(analysis_range)
  print('analysis_index_range: ', analysis_index_range)

  feedstock_price_df = get_feedstock_price_df(feedstocks, analysis_range, startup_year, INFLATION_FACTOR)
  print('feedstock_price_df: ', feedstock_price_df)

  utility_price_df = get_feedstock_price_df(utilities, analysis_range, startup_year, INFLATION_FACTOR)
  print('utility_price_df: ', utility_price_df)

  operation_range = get_operation_range(analysis_index_range, construct)
  print('operation_range: ', operation_range)

  inflation_price_increase_factors = get_inflation_price_increase_factors(analysis_range, inflation_rate, startup_year)
  print('inflation_price_increase_factors: ', inflation_price_increase_factors)

  total_feedstock_cost_column = get_total_feedstock_costs(operation_range, feedstock_price_df, inflation_price_increase_factors, start_time, plant_output_kg_per_year, percnt_var)
  print('total_feedstock_cost_column: ', total_feedstock_cost_column)

  discounted_value_feedstock_cost = get(total_feedstock_cost_column, YEAR_1) + npv(target_after_tax_nominal_irr, skip(total_feedstock_cost_column, 1))
  print('discounted_value_feedstock_cost: ', discounted_value_feedstock_cost)

  direct_cap = sum(capital_investment_costs(capital_investments, CEPCIinflator, CPIinflator))
  print('direct_cap: ', direct_cap)

  CO2_seq = 0
  print('CO2_seq: ', CO2_seq)

  site_preparation_cost = evaluate(site_preparation)
  print('site_preparation_cost: ', site_preparation_cost)

  engineering_and_design_cost = evaluate(engineering_and_design)
  print('engineering_and_design_cost: ', engineering_and_design_cost)

  process_contingency_cost = evaluate(process_contingency)
  print('process_contingency_cost: ', process_contingency_cost)

  project_contingency_cost = evaluate(project_contingency)
  print('project_contingency_cost: ', project_contingency_cost)

  upfront_permitting_costs = evaluate(upfront_permitting)
  print('upfront_permitting_costs: ', upfront_permitting_costs)

  material_cost_maintenance_and_repairs_cost = evaluate(material_cost_maintenance_and_repairs)
  print('material_cost_maintenance_and_repairs_cost: ', material_cost_maintenance_and_repairs_cost)

  production_cost_maintenance_and_repairs_cost = evaluate(production_cost_maintenance_and_repairs)
  print('production_cost_maintenance_and_repairs_cost: ', production_cost_maintenance_and_repairs_cost)

  depr_cap = direct_cap + CO2_seq + (CEPCIinflator * CPIinflator) * (site_preparation_cost + engineering_and_design_cost + process_contingency_cost + project_contingency_cost + other_depreciable_capital_cost + upfront_permitting_costs)
  print('depr_cap: ', depr_cap)

  replacement_costs = get_replacement_costs(operation_range, inflation_price_increase_factors, replacement_costs_for_years, replace_factor, direct_cap, depr_cap, ref_year, startup_year, inflation_rate)
  print('replacement_costs: ', replacement_costs)

  discounted_value_replacement_costs = get(replacement_costs, YEAR_1) + npv(nominal_irr, skip(replacement_costs, 1))
  print('discounted_value_replacement_costs: ', discounted_value_replacement_costs)

  pv_of_cashflow_replacement_costs = npv(nominal_irr, replacement_costs)
  print('pv_of_cashflow_replacement_costs: ', pv_of_cashflow_replacement_costs)

  land_cost = acres_required * cost_per_acre * CPIinflator
  print('land_cost: ', land_cost)

  other_non_depreciable_capital_cost = 0
  print('other_non_depreciable_capital_cost: ', other_non_depreciable_capital_cost)

  non_dep_cap = land_cost + other_non_depreciable_capital_cost
  print('non_dep_cap: ', non_dep_cap)

  total_cap = depr_cap + non_dep_cap
  print('total_cap: ', total_cap)

  depr_cap_infl = (total_cap - non_dep_cap) * INFLATION_FACTOR
  print('depr_cap_infl: ', depr_cap_infl)

  non_dep_infl = non_dep_cap * INFLATION_FACTOR
  print('non_dep_infl: ', non_dep_infl)

  total_capital_investment = depr_cap_infl + non_dep_infl
  print('total_capital_investment: ', total_capital_investment)

  initial_equity_depr_cap = get_initial_equity_depr_cap(analysis_index_range, inflation_price_increase_factors, depr_cap_infl, percentage_equity_financing, percent_cap1, percent_cap2, percent_cap3, percent_cap4)
  print('initial_equity_depr_cap: ', initial_equity_depr_cap)

  discounted_value_initial_equity_depr_cap = get(initial_equity_depr_cap, YEAR_1) + npv(nominal_irr, skip(initial_equity_depr_cap, 1))
  print('discounted_value_initial_equity_depr_cap: ', discounted_value_initial_equity_depr_cap)

  pv_of_cashflow_initial_equity_depr_cap = npv(nominal_irr, initial_equity_depr_cap)
  print('pv_of_cashflow_initial_equity_depr_cap: ', pv_of_cashflow_initial_equity_depr_cap)

  other_non_depreciable_capital_cost_column = get_other_non_depreciable_capital_cost_column(analysis_index_range, inflation_price_increase_factors, non_dep_infl)
  print('other_non_depreciable_capital_cost_column: ', other_non_depreciable_capital_cost_column)

  discounted_value_other_non_depreciable_capital_cost = get(other_non_depreciable_capital_cost_column, YEAR_1) + npv(nominal_irr, skip(other_non_depreciable_capital_cost_column, 1))
  print('discounted_value_other_non_depreciable_capital_cost: ', discounted_value_other_non_depreciable_capital_cost)

  pv_of_cashflow_other_non_depreciable_capital_cost = npv(nominal_irr, other_non_depreciable_capital_cost_column)
  print('pv_of_cashflow_other_non_depreciable_capital_cost: ', pv_of_cashflow_other_non_depreciable_capital_cost)

  decom = decom_percent * depr_cap_infl
  print('decom: ', decom)

  decom_costs_column = get_decom_costs_column(operation_range, inflation_price_increase_factors, decom, plant_life)
  print('decom_costs_column: ', decom_costs_column)

  discounted_value_decom_costs = get(decom_costs_column, YEAR_1) + npv(nominal_irr, skip(decom_costs_column, 1))
  print('discounted_value_decom_costs: ', discounted_value_decom_costs)

  salvage = salvage_perct * total_capital_investment
  print('salvage: ', salvage)

  salvage_column = get_salvage_column(operation_range, inflation_price_increase_factors, salvage, plant_life)
  print('salvage_column: ', salvage_column)

  FTE_HOURS_PER_YEAR = 2080
  print('FTE_HOURS_PER_YEAR: ', FTE_HOURS_PER_YEAR)

  labor_cost_inflator = get_labor_index(ref_year, labor_file) / get_labor_index(BasisYear, labor_file)
  print('labor_cost_inflator: ', labor_cost_inflator)

  labor_cost = total_plant_staff * (labor_cost_per_hour * labor_cost_inflator) * FTE_HOURS_PER_YEAR
  print('labor_cost: ', labor_cost)

  overhead_GA = labor_cost * overhead_rate
  print('overhead_GA: ', overhead_GA)

  tax_insurance = tax_ins_rate * total_cap
  print('tax_insurance: ', tax_insurance)

  total_fixed_cost = labor_cost + overhead_GA + tax_insurance + (CEPCIinflator*CPIinflator) * (licensing + rent + material_cost_maintenance_and_repairs_cost + production_cost_maintenance_and_repairs_cost + other_fees + other_fixed)
  print('total_fixed_cost: ', total_fixed_cost)

  inflated_fixed = total_fixed_cost * INFLATION_FACTOR
  print('inflated_fixed: ', inflated_fixed)

  fixed_cost_column = get_fixed_cost_column(operation_range, inflation_price_increase_factors, inflated_fixed, percnt_fixed, start_time)
  print('fixed_cost_column: ', fixed_cost_column)

  discounted_value_fixed_cost = get(fixed_cost_column, YEAR_1) + npv(target_after_tax_nominal_irr, skip(fixed_cost_column, 1))
  print('discounted_value_fixed_cost: ', discounted_value_fixed_cost)

  total_tax_rate = fed_tax_rate + state_tax_rate * (1 - fed_tax_rate)
  print('total_tax_rate: ', total_tax_rate)

  percentage_debt_financing = 1 - percentage_equity_financing
  print('percentage_debt_financing: ', percentage_debt_financing)

  initial_capital_financed = -depr_cap_infl * percentage_debt_financing * get(inflation_price_increase_factors, YEAR_1)
  print('initial_capital_financed: ', initial_capital_financed)

  LAST_ANALYSIS_YEAR = anal_period + construct - 1
  print('LAST_ANALYSIS_YEAR: ', LAST_ANALYSIS_YEAR)

  principal_payments_column = determine_principal_payment(debt_period, analysis_index_range, LAST_ANALYSIS_YEAR, initial_capital_financed)
  print('principal_payments_column: ', principal_payments_column)

  interest_payments_column = determine_interest_payment(debt_period, analysis_index_range, initial_capital_financed, debt_interest)
  print('interest_payments_column: ', interest_payments_column)

  discounted_value_interest_payments = get(interest_payments_column, YEAR_1) + npv(target_after_tax_nominal_irr, skip(interest_payments_column, 1))
  print('discounted_value_interest_payments: ', discounted_value_interest_payments)

  pv_of_cashflow_interest_payments = npv(nominal_irr, interest_payments_column)
  print('pv_of_cashflow_interest_payments: ', pv_of_cashflow_interest_payments)

  h2_sales_kg_per_year = get_h2_sales_kg_per_year(operation_range, plant_output_kg_per_year, percnt_revs, start_time)
  print('h2_sales_kg_per_year: ', h2_sales_kg_per_year)

  discounted_value_total_h2_sales_kg = get(h2_sales_kg_per_year, YEAR_1) + npv(real_irr, skip(h2_sales_kg_per_year, 1))
  print('discounted_value_total_h2_sales_kg: ', discounted_value_total_h2_sales_kg)

  LCOE_contribution_h2_sales_kg = discounted_value_total_h2_sales_kg * (1 - total_tax_rate)
  print('LCOE_contribution_h2_sales_kg: ', LCOE_contribution_h2_sales_kg)

  discounted_value_total_salvage_value = get(salvage_column, YEAR_1) + npv(target_after_tax_nominal_irr, skip(salvage_column, 1))
  print('discounted_value_total_salvage_value: ', discounted_value_total_salvage_value)

  pv_of_cashflow_total_salvage_value = npv(nominal_irr, salvage_column)
  print('pv_of_cashflow_total_salvage_value: ', pv_of_cashflow_total_salvage_value)

  nonenergy_material_price_df = get_nonenergy_material_price_df(nonenergy_materials, analysis_range, INFLATION_FACTOR, ref_year)
  print('nonenergy_material_price_df: ', nonenergy_material_price_df)

  var_misc = other_variable_operating_costs * get(chemical_price_index, ref_year) / get(chemical_price_index, BasisYear)
  print('var_misc: ', var_misc)

  waste_treat = waste_treatment_costs * get(chemical_price_index, ref_year) / get(chemical_price_index, BasisYear)
  print('waste_treat: ', waste_treat)

  solidwaste_treat = solid_waste_disposal_costs * get(chemical_price_index, ref_year) / get(chemical_price_index, BasisYear)
  print('solidwaste_treat: ', solidwaste_treat)

  feedstock_energy_input_GJ_per_kg_h2 = get_energy_input_for_feedstocks(feedstocks)
  print('feedstock_energy_input_GJ_per_kg_h2: ', feedstock_energy_input_GJ_per_kg_h2)

  utility_energy_input_GJ_per_kg_h2 = get_energy_input_for_feedstocks(utilities)
  print('utility_energy_input_GJ_per_kg_h2: ', utility_energy_input_GJ_per_kg_h2)

  production_process_energy_efficiency = get(conversion_factors, 'kg_H2_LHV_to_GJ') / (sum(feedstock_energy_input_GJ_per_kg_h2) + sum(utility_energy_input_GJ_per_kg_h2))
  print('production_process_energy_efficiency: ', production_process_energy_efficiency)

  upstream_energy_usage_column_names = args_to_list('Total Energy', 'Fossil Fuels', 'Petroleum')
  print('upstream_energy_usage_column_names: ', upstream_energy_usage_column_names)

  upstream_energy_usage_GJ_per_kg_h2 = get_upstream_energy_usage_for_feedstocks(feedstocks, feedstock_energy_input_GJ_per_kg_h2, upstream_energy_usage_column_names)
  print('upstream_energy_usage_GJ_per_kg_h2: ', upstream_energy_usage_GJ_per_kg_h2)

  greenhouse_gas_column_names = args_to_list('CO2', 'CH4', 'N2O')
  print('greenhouse_gas_column_names: ', greenhouse_gas_column_names)

  feedstock_upstream_ghg_emissions_kg_per_kg_h2 = get_upstream_ghg_emissions_for_feedstocks(feedstocks, feedstock_energy_input_GJ_per_kg_h2, greenhouse_gas_column_names)
  print('feedstock_upstream_ghg_emissions_kg_per_kg_h2: ', feedstock_upstream_ghg_emissions_kg_per_kg_h2)

  feedstock_upstream_ghg_emissions_kg_per_kg_h2_total = get_total_ghg_emissions(feedstock_upstream_ghg_emissions_kg_per_kg_h2, get(conversion_factors, 'CO2'), get(conversion_factors, 'CH4'), get(conversion_factors, 'N2O'))
  print('feedstock_upstream_ghg_emissions_kg_per_kg_h2_total: ', feedstock_upstream_ghg_emissions_kg_per_kg_h2_total)

  utility_upstream_ghg_emissions_kg_per_kg_h2 = get_upstream_ghg_emissions_for_feedstocks(utilities, utility_energy_input_GJ_per_kg_h2, greenhouse_gas_column_names)
  print('utility_upstream_ghg_emissions_kg_per_kg_h2: ', utility_upstream_ghg_emissions_kg_per_kg_h2)

  utility_upstream_ghg_emissions_kg_per_kg_h2_total = get_total_ghg_emissions(utility_upstream_ghg_emissions_kg_per_kg_h2, get(conversion_factors, 'CO2'), get(conversion_factors, 'CH4'), get(conversion_factors, 'N2O'))
  print('utility_upstream_ghg_emissions_kg_per_kg_h2_total: ', utility_upstream_ghg_emissions_kg_per_kg_h2_total)

  production_process_ghg_emissions_kg_per_kg_h2 = get_production_process_ghg_emissions_for_feedstocks(feedstocks, greenhouse_gas_column_names)
  print('production_process_ghg_emissions_kg_per_kg_h2: ', production_process_ghg_emissions_kg_per_kg_h2)

  production_process_ghg_emissions_kg_per_kg_h2_total = get_production_process_total_ghg_emissions_for_feedstocks(production_process_ghg_emissions_kg_per_kg_h2, get(conversion_factors, 'CO2'), get(conversion_factors, 'CH4'), get(conversion_factors, 'N2O'))
  print('production_process_ghg_emissions_kg_per_kg_h2_total: ', production_process_ghg_emissions_kg_per_kg_h2_total)

  total_process_pollutants_produced_kg_per_kg_h2 = sum_columns(production_process_ghg_emissions_kg_per_kg_h2)
  print('total_process_pollutants_produced_kg_per_kg_h2: ', total_process_pollutants_produced_kg_per_kg_h2)

  total_process_pollutants_produced_all_ghg_kg_per_kg_h2 = sum(production_process_ghg_emissions_kg_per_kg_h2_total)
  print('total_process_pollutants_produced_all_ghg_kg_per_kg_h2: ', total_process_pollutants_produced_all_ghg_kg_per_kg_h2)

  total_process_pollutants_produced_metric_tons_per_year = get_total_in_metric_tons_per_year(total_process_pollutants_produced_kg_per_kg_h2, plant_output_kg_per_year)
  print('total_process_pollutants_produced_metric_tons_per_year: ', total_process_pollutants_produced_metric_tons_per_year)

  total_process_pollutants_produced_all_ghg_metric_tons_per_year = round_num(total_process_pollutants_produced_all_ghg_kg_per_kg_h2 * plant_output_kg_per_year / 1000, -2)
  print('total_process_pollutants_produced_all_ghg_metric_tons_per_year: ', total_process_pollutants_produced_all_ghg_metric_tons_per_year)

  total_feedstock_pollutants_produced_kg_per_kg_h2 = sum_columns(production_process_ghg_emissions_kg_per_kg_h2)
  print('total_feedstock_pollutants_produced_kg_per_kg_h2: ', total_feedstock_pollutants_produced_kg_per_kg_h2)

  total_feedstock_pollutants_produced_all_ghg_kg_per_kg_h2 = sum(production_process_ghg_emissions_kg_per_kg_h2_total)
  print('total_feedstock_pollutants_produced_all_ghg_kg_per_kg_h2: ', total_feedstock_pollutants_produced_all_ghg_kg_per_kg_h2)

  total_feedstock_pollutants_produced_metric_tons_per_year = get_total_in_metric_tons_per_year(total_feedstock_pollutants_produced_kg_per_kg_h2, plant_output_kg_per_year)
  print('total_feedstock_pollutants_produced_metric_tons_per_year: ', total_feedstock_pollutants_produced_metric_tons_per_year)

  total_feedstock_pollutants_produced_all_ghg_metric_tons_per_year = round_num(total_feedstock_pollutants_produced_all_ghg_kg_per_kg_h2 * plant_output_kg_per_year / 1000, -2)
  print('total_feedstock_pollutants_produced_all_ghg_metric_tons_per_year: ', total_feedstock_pollutants_produced_all_ghg_metric_tons_per_year)

  co2_captured_kg_per_kg_h2 = get_co2_captured_kg_per_kg_h2(total_feedstock_pollutants_produced_kg_per_kg_h2, CO2_Capture_Efficiency)
  print('co2_captured_kg_per_kg_h2: ', co2_captured_kg_per_kg_h2)

  co2_captured_metric_tons_per_year = get_co2_captured_metric_tons_per_year(co2_captured_kg_per_kg_h2, plant_output_kg_per_year)
  print('co2_captured_metric_tons_per_year: ', co2_captured_metric_tons_per_year)

  total_process_emissions_kg_per_kg_h2 = get_total_process_emissions_kg_per_kg_h2(total_process_pollutants_produced_kg_per_kg_h2, co2_captured_kg_per_kg_h2)
  print('total_process_emissions_kg_per_kg_h2: ', total_process_emissions_kg_per_kg_h2)

  total_process_emissions_all_ghg_kg_per_kg_h2 = calculate_total_ghg_emission(total_process_emissions_kg_per_kg_h2, get(conversion_factors, 'CO2'), get(conversion_factors, 'CH4'), get(conversion_factors, 'N2O'))
  print('total_process_emissions_all_ghg_kg_per_kg_h2: ', total_process_emissions_all_ghg_kg_per_kg_h2)

  total_process_emissions_metric_tons_per_year = get_total_process_emissions_metric_tons_per_year(total_process_emissions_kg_per_kg_h2, plant_output_kg_per_year)
  print('total_process_emissions_metric_tons_per_year: ', total_process_emissions_metric_tons_per_year)

  total_upstream_emissions_kg_per_kg_h2 = sum_columns(feedstock_upstream_ghg_emissions_kg_per_kg_h2)
  print('total_upstream_emissions_kg_per_kg_h2: ', total_upstream_emissions_kg_per_kg_h2)

  total_upstream_emissions_all_ghg_kg_per_kg_h2 = sum(feedstock_upstream_ghg_emissions_kg_per_kg_h2_total) + sum(utility_upstream_ghg_emissions_kg_per_kg_h2_total)
  print('total_upstream_emissions_all_ghg_kg_per_kg_h2: ', total_upstream_emissions_all_ghg_kg_per_kg_h2)

  total_well_to_pump_emissions_kg_per_kg_h2 = get_total_well_to_pump_emissions_kg_per_kg_h2(total_upstream_emissions_kg_per_kg_h2, total_process_emissions_kg_per_kg_h2)
  print('total_well_to_pump_emissions_kg_per_kg_h2: ', total_well_to_pump_emissions_kg_per_kg_h2)

  total_well_to_pump_emissions_all_ghg_kg_per_kg_h2 = total_upstream_emissions_all_ghg_kg_per_kg_h2 + total_process_emissions_all_ghg_kg_per_kg_h2
  print('total_well_to_pump_emissions_all_ghg_kg_per_kg_h2: ', total_well_to_pump_emissions_all_ghg_kg_per_kg_h2)

  co2_mass_flowrate_metric_tonnes_per_day = get(total_process_pollutants_produced_metric_tons_per_year, FIRST) / 365 * CO2_Capture_Efficiency
  print('co2_mass_flowrate_metric_tonnes_per_day: ', co2_mass_flowrate_metric_tonnes_per_day)

  co2_mass_flowrate_million_metric_tonnes_per_year = co2_mass_flowrate_metric_tonnes_per_day * 365 / 1000000
  print('co2_mass_flowrate_million_metric_tonnes_per_year: ', co2_mass_flowrate_million_metric_tonnes_per_year)

  cc_transport_cost_nominal_dollars_per_tonne_co2 = get_cc_transport_cost(CO2_Capture_Efficiency, co2_mass_flowrate_million_metric_tonnes_per_year, capacity_factor, pipeline_length_km)
  print('cc_transport_cost_nominal_dollars_per_tonne_co2: ', cc_transport_cost_nominal_dollars_per_tonne_co2)

  cc_storage_cost_nominal_dollars_per_tonne_co2 = get_cc_storage_cost(CO2_Capture_Efficiency, co2_mass_flowrate_million_metric_tonnes_per_year, capacity_factor)
  print('cc_storage_cost_nominal_dollars_per_tonne_co2: ', cc_storage_cost_nominal_dollars_per_tonne_co2)

  cc_transport_cost_basis_year_dollars_per_tonne_co2 = cc_transport_cost_nominal_dollars_per_tonne_co2 * get_cpi(BasisYear, cpi_file) / get_cpi(startup_year, cpi_file)
  print('cc_transport_cost_basis_year_dollars_per_tonne_co2: ', cc_transport_cost_basis_year_dollars_per_tonne_co2)

  cc_storage_cost_basis_year_dollars_per_tonne_co2 = cc_storage_cost_nominal_dollars_per_tonne_co2 * get_cpi(BasisYear - 1, cpi_file) / get_cpi(startup_year - 1, cpi_file)
  print('cc_storage_cost_basis_year_dollars_per_tonne_co2: ', cc_storage_cost_basis_year_dollars_per_tonne_co2)

  cc_transport_cost_first_year_basis_year_dollars_per_year = cc_transport_cost_basis_year_dollars_per_tonne_co2 * co2_mass_flowrate_million_metric_tonnes_per_year * 1000000
  print('cc_transport_cost_first_year_basis_year_dollars_per_year: ', cc_transport_cost_first_year_basis_year_dollars_per_year)

  cc_storage_cost_first_year_basis_year_dollars_per_year = cc_storage_cost_basis_year_dollars_per_tonne_co2 * co2_mass_flowrate_million_metric_tonnes_per_year * 1000000
  print('cc_storage_cost_first_year_basis_year_dollars_per_year: ', cc_storage_cost_first_year_basis_year_dollars_per_year)

  total_cc_cost_first_year_per_tonne_co2 = cc_transport_cost_first_year_basis_year_dollars_per_year + cc_storage_cost_first_year_basis_year_dollars_per_year
  print('total_cc_cost_first_year_per_tonne_co2: ', total_cc_cost_first_year_per_tonne_co2)

  cc_transport_cost_ref_year_dollars_per_tonne_co2 = cc_transport_cost_basis_year_dollars_per_tonne_co2 * get_cpi(ref_year, cpi_file) / get_cpi(BasisYear, cpi_file)
  print('cc_transport_cost_ref_year_dollars_per_tonne_co2: ', cc_transport_cost_ref_year_dollars_per_tonne_co2)

  cc_storage_cost_ref_year_dollars_per_tonne_co2 = cc_storage_cost_basis_year_dollars_per_tonne_co2 * get_cpi(ref_year, cpi_file) / get_cpi(BasisYear, cpi_file)
  print('cc_storage_cost_ref_year_dollars_per_tonne_co2: ', cc_storage_cost_ref_year_dollars_per_tonne_co2)

  cc_transport_cost_ref_year_dollars_per_kg_H2 = (cc_transport_cost_first_year_basis_year_dollars_per_year / plant_output_kg_per_year) * get_cpi(ref_year, cpi_file) / get_cpi(BasisYear, cpi_file)
  print('cc_transport_cost_ref_year_dollars_per_kg_H2: ', cc_transport_cost_ref_year_dollars_per_kg_H2)

  cc_storage_cost_ref_year_dollars_per_kg_H2 = (cc_storage_cost_first_year_basis_year_dollars_per_year / plant_output_kg_per_year) * get_cpi(ref_year - 1, cpi_file) / get_cpi(BasisYear - 1, cpi_file)
  print('cc_storage_cost_ref_year_dollars_per_kg_H2: ', cc_storage_cost_ref_year_dollars_per_kg_H2)

  CO2_OandMcost = total_cc_cost_first_year_per_tonne_co2
  print('CO2_OandMcost: ', CO2_OandMcost)

  inflated_othervar = INFLATION_FACTOR * (var_misc + royalties + operator_profit + CO2_OandMcost + waste_treat + solidwaste_treat)
  print('inflated_othervar: ', inflated_othervar)

  variable_cost_column = get_variable_cost_column(operation_range, analysis_index_range, utility_price_df, nonenergy_material_price_df, inflation_price_increase_factors, plant_output_kg_per_year, percnt_var, start_time, inflated_othervar)
  print('variable_cost_column: ', variable_cost_column)

  discounted_value_variable_cost = get(variable_cost_column, YEAR_1) + npv(target_after_tax_nominal_irr, skip(variable_cost_column, 1))
  print('discounted_value_variable_cost: ', discounted_value_variable_cost)

  total_other_raw = other_material_costs * get(chemical_price_index, ref_year) / get(chemical_price_index, BasisYear)
  print('total_other_raw: ', total_other_raw)

  inflated_otherraw = total_other_raw * INFLATION_FACTOR
  print('inflated_otherraw: ', inflated_otherraw)

  other_raw_material_cost_column = get_other_raw_material_cost_column(operation_range, inflation_price_increase_factors, inflated_otherraw, percnt_var, start_time)
  print('other_raw_material_cost_column: ', other_raw_material_cost_column)

  discounted_value_other_raw_material_cost = get(other_raw_material_cost_column, YEAR_1) + npv(target_after_tax_nominal_irr, skip(other_raw_material_cost_column, 1))
  print('discounted_value_other_raw_material_cost: ', discounted_value_other_raw_material_cost)

  working_cap_reserve_rows = get_working_cap_reserve_rows(slice(operation_range, end = length(operation_range) - 1), slice(analysis_index_range, end = length(analysis_index_range) - 1), WorkingCap, fixed_cost_column, total_feedstock_cost_column, other_raw_material_cost_column, variable_cost_column)
  print('working_cap_reserve_rows: ', working_cap_reserve_rows)

  working_cap_reserve_column = get_working_cap_reserve_column(working_cap_reserve_rows)
  print('working_cap_reserve_column: ', working_cap_reserve_column)

  discounted_value_working_cap_reserve = get(working_cap_reserve_column, YEAR_1) + npv(nominal_irr, skip(working_cap_reserve_column, 1))
  print('discounted_value_working_cap_reserve: ', discounted_value_working_cap_reserve)

  pv_of_cashflow_working_cap_reserve = npv(nominal_irr, working_cap_reserve_column)
  print('pv_of_cashflow_working_cap_reserve: ', pv_of_cashflow_working_cap_reserve)

  LCOE_contribution_capital_costs = -(discounted_value_initial_equity_depr_cap + discounted_value_replacement_costs + discounted_value_working_cap_reserve + discounted_value_other_non_depreciable_capital_cost)
  print('LCOE_contribution_capital_costs: ', LCOE_contribution_capital_costs)

  total_initial_depreciable_capital = -(initial_capital_financed + sum(initial_equity_depr_cap))
  print('total_initial_depreciable_capital: ', total_initial_depreciable_capital)

  annual_depreciable_capital = get_annual_depreciable_capital(operation_range, replacement_costs, total_initial_depreciable_capital)
  print('annual_depreciable_capital: ', annual_depreciable_capital)

  recovery_range = range(1, 22)
  print('recovery_range: ', recovery_range)

  depreciation_calculation_table = get_depreciation_calculation_table(recovery_range, operation_range, depr_type, depr_length, annual_depreciable_capital)
  print('depreciation_calculation_table: ', depreciation_calculation_table)

  recovery_index_range = seq_along(recovery_range)
  print('recovery_index_range: ', recovery_index_range)

  depreciation_charges = get_depreciation_charges(analysis_index_range, recovery_index_range, depreciation_calculation_table)
  print('depreciation_charges: ', depreciation_charges)

  remaining_depreciation_range = range(anal_period+construct, anal_period+construct+depr_length+1)
  print('remaining_depreciation_range: ', remaining_depreciation_range)

  remaining_depreciation_charges = get_depreciation_charges(remaining_depreciation_range, recovery_index_range, depreciation_calculation_table)
  print('remaining_depreciation_charges: ', remaining_depreciation_charges)

  total_remaining_depreciation_charges = sum(remaining_depreciation_charges)
  print('total_remaining_depreciation_charges: ', total_remaining_depreciation_charges)

  depreciation_charges_column = get_depreciation_charges_column(depreciation_charges, analysis_index_range, total_remaining_depreciation_charges, anal_period, construct)
  print('depreciation_charges_column: ', depreciation_charges_column)

  discounted_value_depreciation_charges = get(depreciation_charges_column, YEAR_1) + npv(nominal_irr, skip(depreciation_charges_column, 1))
  print('discounted_value_depreciation_charges: ', discounted_value_depreciation_charges)

  pv_of_cashflow_depreciation_charges = npv(nominal_irr, depreciation_charges_column)
  print('pv_of_cashflow_depreciation_charges: ', pv_of_cashflow_depreciation_charges)

  LCOE_contribution_depreciation = discounted_value_depreciation_charges * total_tax_rate
  print('LCOE_contribution_depreciation: ', LCOE_contribution_depreciation)

  LCOE_contribution_principal_payments = -(get(principal_payments_column, YEAR_1) + npv(nominal_irr, skip(principal_payments_column, 1)))
  print('LCOE_contribution_principal_payments: ', LCOE_contribution_principal_payments)

  pv_of_cashflow_principal_payments = npv(nominal_irr, principal_payments_column)
  print('pv_of_cashflow_principal_payments: ', pv_of_cashflow_principal_payments)

  LCOE_contribution_operation_costs = -(discounted_value_total_salvage_value + discounted_value_decom_costs + discounted_value_fixed_cost + discounted_value_feedstock_cost + discounted_value_other_raw_material_cost + discounted_value_variable_cost + discounted_value_interest_payments) * (1-total_tax_rate)
  print('LCOE_contribution_operation_costs: ', LCOE_contribution_operation_costs)

  H2_price_nominal = ((LCOE_contribution_capital_costs + LCOE_contribution_depreciation + LCOE_contribution_principal_payments + LCOE_contribution_operation_costs) / LCOE_contribution_h2_sales_kg) * (1 + inflation_rate) ** construct
  print('H2_price_nominal: ', H2_price_nominal)

  H2_price_real = H2_price_nominal / INFLATION_FACTOR
  print('H2_price_real: ', H2_price_real)

  revenue_h2_sales = get_revenue_h2_sales_column(operation_range, inflation_price_increase_factors, H2_price_nominal, plant_output_kg_per_year, percnt_revs, start_time)
  print('revenue_h2_sales: ', revenue_h2_sales)

  predepreciation_income_column = get_predepreciation_income_column(revenue_h2_sales, salvage_column, decom_costs_column, fixed_cost_column, total_feedstock_cost_column, other_raw_material_cost_column, variable_cost_column, interest_payments_column)
  print('predepreciation_income_column: ', predepreciation_income_column)

  taxable_income_column = get_taxable_income_column(predepreciation_income_column, depreciation_charges_column)
  print('taxable_income_column: ', taxable_income_column)

  tax_credit = tax_credit_per_year * CPIinflator
  print('tax_credit: ', tax_credit)

  Upstream_CO2_taxpYear = 0
  print('Upstream_CO2_taxpYear: ', Upstream_CO2_taxpYear)

  Proc_CO2_taxpYear = 0
  print('Proc_CO2_taxpYear: ', Proc_CO2_taxpYear)

  total_taxes_column = get_total_taxes_column(taxable_income_column, total_tax_rate, tax_credit, Upstream_CO2_taxpYear, Proc_CO2_taxpYear)
  print('total_taxes_column: ', total_taxes_column)

  after_tax_income_column = get_after_tax_income_column(predepreciation_income_column, total_taxes_column)
  print('after_tax_income_column: ', after_tax_income_column)

  aftertax_post_depreciation_cashflow_column = get_aftertax_post_depreciation_cashflow(initial_equity_depr_cap, replacement_costs, working_cap_reserve_column, other_non_depreciable_capital_cost_column, predepreciation_income_column, total_taxes_column, principal_payments_column)
  print('aftertax_post_depreciation_cashflow_column: ', aftertax_post_depreciation_cashflow_column)

  cumulative_cashflow_column = get_cumulative_cashflow_column(aftertax_post_depreciation_cashflow_column, analysis_index_range)
  print('cumulative_cashflow_column: ', cumulative_cashflow_column)

  pretax_cashflow = get_pretax_cashflow_column(initial_equity_depr_cap, replacement_costs, working_cap_reserve_column, other_non_depreciable_capital_cost_column, predepreciation_income_column, principal_payments_column)
  print('pretax_cashflow: ', pretax_cashflow)

  after_tax_nominal_IRR = irr(aftertax_post_depreciation_cashflow_column)
  print('after_tax_nominal_IRR: ', after_tax_nominal_IRR)

  pre_tax_nominal_IRR = irr(pretax_cashflow)
  print('pre_tax_nominal_IRR: ', pre_tax_nominal_IRR)

  aftertax_real_capital_recovery_factor = (real_irr * (1 + real_irr) ** anal_period) / (((1 + real_irr) ** anal_period) - 1)
  print('aftertax_real_capital_recovery_factor: ', aftertax_real_capital_recovery_factor)

  aftertax_nominal_capital_recovery_factor = (nominal_irr * (1 + nominal_irr) ** anal_period) / (((1 + nominal_irr) ** anal_period) - 1)
  print('aftertax_nominal_capital_recovery_factor: ', aftertax_nominal_capital_recovery_factor)

  total_real_fixed_charge_rate = (aftertax_real_capital_recovery_factor * (1 - total_tax_rate * npv(real_irr, get(macrs_depreciation_table, depr_length))) ) / (1 - total_tax_rate)
  print('total_real_fixed_charge_rate: ', total_real_fixed_charge_rate)

  total_nominal_fixed_charge_rate = (aftertax_nominal_capital_recovery_factor * (1 - total_tax_rate * npv(nominal_irr, get(macrs_depreciation_table, depr_length))) ) / (1 - total_tax_rate)
  print('total_nominal_fixed_charge_rate: ', total_nominal_fixed_charge_rate)

  after_tax_present_value_capital_related_costs = (pv_of_cashflow_initial_equity_depr_cap + pv_of_cashflow_replacement_costs + pv_of_cashflow_working_cap_reserve + pv_of_cashflow_other_non_depreciable_capital_cost + (pv_of_cashflow_total_salvage_value * (1 - total_tax_rate)) + (pv_of_cashflow_interest_payments * (1 - total_tax_rate)) + (pv_of_cashflow_depreciation_charges * (-total_tax_rate)) + pv_of_cashflow_principal_payments) / (1 - total_tax_rate)
  print('after_tax_present_value_capital_related_costs: ', after_tax_present_value_capital_related_costs)

  after_tax_present_value_decommissioning_costs = npv(nominal_irr, decom_costs_column)
  print('after_tax_present_value_decommissioning_costs: ', after_tax_present_value_decommissioning_costs)

  after_tax_present_value_fixed_cost = npv(nominal_irr, fixed_cost_column)
  print('after_tax_present_value_fixed_cost: ', after_tax_present_value_fixed_cost)

  after_tax_present_value_total_feedstock_cost = npv(nominal_irr, total_feedstock_cost_column)
  print('after_tax_present_value_total_feedstock_cost: ', after_tax_present_value_total_feedstock_cost)

  after_tax_present_value_other_raw_material_cost = npv(nominal_irr, other_raw_material_cost_column)
  print('after_tax_present_value_other_raw_material_cost: ', after_tax_present_value_other_raw_material_cost)

  after_tax_present_value_byproduct_credits = 0
  print('after_tax_present_value_byproduct_credits: ', after_tax_present_value_byproduct_credits)

  after_tax_present_value_variable_cost = npv(nominal_irr, variable_cost_column)
  print('after_tax_present_value_variable_cost: ', after_tax_present_value_variable_cost)

  summed_cost_components = sum_args(after_tax_present_value_capital_related_costs, after_tax_present_value_decommissioning_costs, after_tax_present_value_fixed_cost, after_tax_present_value_total_feedstock_cost, after_tax_present_value_other_raw_material_cost, after_tax_present_value_byproduct_credits, after_tax_present_value_variable_cost)
  print('summed_cost_components: ', summed_cost_components)

  percentage_of_cost_capital_related_costs = after_tax_present_value_capital_related_costs / summed_cost_components
  print('percentage_of_cost_capital_related_costs: ', percentage_of_cost_capital_related_costs)

  percentage_of_cost_decommissioning_costs = after_tax_present_value_decommissioning_costs / summed_cost_components
  print('percentage_of_cost_decommissioning_costs: ', percentage_of_cost_decommissioning_costs)

  percentage_of_cost_fixed_cost = after_tax_present_value_fixed_cost / summed_cost_components
  print('percentage_of_cost_fixed_cost: ', percentage_of_cost_fixed_cost)

  percentage_of_cost_total_feedstock_cost = after_tax_present_value_total_feedstock_cost / summed_cost_components
  print('percentage_of_cost_total_feedstock_cost: ', percentage_of_cost_total_feedstock_cost)

  percentage_of_cost_other_raw_material_cost = after_tax_present_value_other_raw_material_cost / summed_cost_components
  print('percentage_of_cost_other_raw_material_cost: ', percentage_of_cost_other_raw_material_cost)

  percentage_of_cost_byproduct_credits = after_tax_present_value_byproduct_credits / summed_cost_components
  print('percentage_of_cost_byproduct_credits: ', percentage_of_cost_byproduct_credits)

  percentage_of_cost_variable_cost = after_tax_present_value_variable_cost / summed_cost_components
  print('percentage_of_cost_variable_cost: ', percentage_of_cost_variable_cost)

  dollars_per_kg_h2_capital_related_costs = H2_price_real * percentage_of_cost_capital_related_costs
  print('dollars_per_kg_h2_capital_related_costs: ', dollars_per_kg_h2_capital_related_costs)

  dollars_per_kg_h2_decommissioning_costs = H2_price_real * percentage_of_cost_decommissioning_costs
  print('dollars_per_kg_h2_decommissioning_costs: ', dollars_per_kg_h2_decommissioning_costs)

  dollars_per_kg_h2_fixed_cost = H2_price_real * percentage_of_cost_fixed_cost
  print('dollars_per_kg_h2_fixed_cost: ', dollars_per_kg_h2_fixed_cost)

  dollars_per_kg_h2_total_feedstock_cost = H2_price_real * percentage_of_cost_total_feedstock_cost
  print('dollars_per_kg_h2_total_feedstock_cost: ', dollars_per_kg_h2_total_feedstock_cost)

  dollars_per_kg_h2_other_raw_material_cost = H2_price_real * percentage_of_cost_other_raw_material_cost
  print('dollars_per_kg_h2_other_raw_material_cost: ', dollars_per_kg_h2_other_raw_material_cost)

  dollars_per_kg_h2_byproduct_credits = H2_price_real * percentage_of_cost_byproduct_credits
  print('dollars_per_kg_h2_byproduct_credits: ', dollars_per_kg_h2_byproduct_credits)

  dollars_per_kg_h2_variable_cost = H2_price_real * percentage_of_cost_variable_cost
  print('dollars_per_kg_h2_variable_cost: ', dollars_per_kg_h2_variable_cost)

  return locals()
