#
# This file is programmatically generated by py_writer.py; do not edit
#
from h2a.helpers import concat, get, split
from h2a.ref_tables import conversion_factor, get_aeo


def get_feedstock_price_for_year(year, feedstock, INFLATION_FACTOR):
    """Get the price of a feedstock for a given year"""
    return (
        get(get(get_aeo(get(feedstock, "price_table")), get(feedstock, "name")), year)
        * get(feedstock, "usage")
        * conversion_factor(
            concat(get(split(get(feedstock, "units"), "/"), 0), "_to_$/GJ")
        )
        * INFLATION_FACTOR
    )


def lookup_prices_for_feedstock(analysis_range, feedstock, INFLATION_FACTOR):
    """Lookup prices for a given feedstock over a range of years"""
    return list(
        map(
            lambda year: get_feedstock_price_for_year(
                year, feedstock, INFLATION_FACTOR
            ),
            analysis_range,
        )
    )


def get_feedstock_price_for_startup_year(
    year, feedstock, startup_year, INFLATION_FACTOR
):
    """Get the price of a feedstock for the startup year"""
    return (
        get(
            get(get_aeo(get(feedstock, "price_table")), get(feedstock, "name")),
            startup_year,
        )
        * get(feedstock, "usage")
        * conversion_factor(
            concat(get(split(get(feedstock, "units"), "/"), 0), "_to_$/GJ")
        )
        * INFLATION_FACTOR
    )


def fixed_prices_for_feedstock(
    analysis_range, feedstock, startup_year, INFLATION_FACTOR
):
    """Get fixed prices for a given feedstock over a range of years"""
    return list(
        map(
            lambda year: get_feedstock_price_for_startup_year(
                year, feedstock, startup_year, INFLATION_FACTOR
            ),
            analysis_range,
        )
    )


def select_feedstock_prices(feedstock, analysis_range, startup_year, INFLATION_FACTOR):
    """For a given feedstock, select whether to lookup prices or use a fixed price"""
    if get(feedstock, "lookup_prices"):
        return lookup_prices_for_feedstock(analysis_range, feedstock, INFLATION_FACTOR)
    else:
        return fixed_prices_for_feedstock(
            analysis_range, feedstock, startup_year, INFLATION_FACTOR
        )


def get_feedstock_price_df(feedstocks, analysis_range, startup_year, INFLATION_FACTOR):
    """Get a dataframe of prices by feedstock and year"""
    return list(
        map(
            lambda feedstock: select_feedstock_prices(
                feedstock, analysis_range, startup_year, INFLATION_FACTOR
            ),
            feedstocks,
        )
    )
