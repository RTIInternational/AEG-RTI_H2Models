#
# This file is programmatically generated by py_writer.py; do not edit
#
from h2a.helpers import YEAR_1


def calculate_principal_payment_when_constant_debt(
    year, last_year, initial_capital_financed
):
    """✅ Annual payment for the constant debt case"""
    if year == last_year:
        return initial_capital_financed
    else:
        return 0


def calculate_principal_payment_when_paying_debt(annual_payment, interest_amount):
    """📝 Annual payment for when making payments that decrease the balance"""
    if BALANCE_EXISTS:
        return annual_payment - interest_amount
    else:
        return 0


def get_principal_payments_constant_debt(
    analysis_range, last_year, initial_capital_financed
):
    """Principal payments for the constant debt case"""
    return list(
        map(
            lambda year: calculate_principal_payment_when_constant_debt(
                year, last_year, initial_capital_financed
            ),
            analysis_range,
        )
    )


def determine_principal_payment(
    debt_period, analysis_range, last_year, initial_capital_financed
):
    """✅ Constant or paying down debt?"""
    if debt_period == 0:
        return get_principal_payments_constant_debt(
            analysis_range, last_year, initial_capital_financed
        )
    else:
        return calculate_principal_payment_when_paying_debt


def calculate_interest_amount(year, balance, debt_interest):
    """📝 Interest amount for the current year"""
    return balance * debt_interest


def get_interest_payments_constant_debt(
    analysis_range, initial_capital_financed, debt_interest
):
    """Interest payments for the constant debt case"""
    return list(
        map(
            lambda year: calculate_interest_amount(
                year, initial_capital_financed, debt_interest
            ),
            analysis_range,
        )
    )


def determine_interest_payment(
    debt_period, analysis_range, initial_capital_financed, debt_interest
):
    """✅ Constant or paying down debt?"""
    if debt_period == 0:
        return get_interest_payments_constant_debt(
            analysis_range, initial_capital_financed, debt_interest
        )
    else:
        return calculate_principal_payment_when_paying_debt


def determine_annual_payment(debt_period, initial_capital_financed, debt_interest):
    if debt_period == 0:
        return initial_capital_financed * debt_interest
    else:
        return previous_value


def calculate_principal_owed(year):
    if year == YEAR_1:
        return initial_capital_financed
    else:
        return previous_value - principal_paid
